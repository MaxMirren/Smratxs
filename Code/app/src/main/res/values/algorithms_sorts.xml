<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="sorts_names">
        <item>#SORT</item>
        <item>Stupid sort</item>
        <item>Insertion sort</item>
        <item>Bubble sort</item>
        <item>Cocktail Shaker sort</item>
        <item>#LIST SEARCH</item>
        <item>Linear search</item>
    </string-array>

    <string-array name="description">
        <item>
            This sort is a highly ineffective sorting function based on the generate and test paradigm.
            The function successively generates permutations of its input until it finds one that is sorted.
            It is not useful for sorting, but may be used for educational purposes, to contrast it with more efficient
            algorithms. Two versions of the function exist: a deterministic version that enumerates all permutations
            until it hits a sorted one, and a randomized version that randomly permutes its input.
            An analogy for the working of the latter version is to sort a deck of cards by throwing the deck into the
            air, picking the cards up at random, and repeating the process until the deck is sorted.
            Its name is a portmanteau the words bogus and sort.
        </item>
        <item>
            Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time.
            It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort. However, insertion sort provides several advantages:
            Simple implementation: Jon Bentley shows a three-line C version, and a five-line optimized version
            Efficient for (quite) small data sets, much like other quadratic sorting algorithms
            More efficient in practice than most other simple quadratic (i.e., O(n2)) algorithms such as selection sort
            or bubble sort Adaptive, i.e., efficient for data sets that are already substantially sorted: the time
            complexity is O(nk) when each element in the input is no more than k places away from its sorted position
            Stable; i.e., does not change the relative order of elements with equal keys
            In-place; i.e., only requires a constant amount O(1) of additional memory space
            Online; i.e., can sort a list as it receives it
            When people manually sort cards in a bridge hand, most use a method that is similar to insertion sort.
        </item>
        <item>
            Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps
            through the list, compares adjacent pairs and swaps them if they are in the wrong order. The pass through
            the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for
            the way smaller or larger elements "bubble" to the top of the list. Although the algorithm is simple,
            it is too slow and impractical for most problems even when compared to insertion sort. Bubble sort can be
            practical if the input is in mostly sorted order with some out-of-order elements nearly in position.
        </item>
        <item>
            Cocktail shaker sort, also known as bidirectional bubble sort, cocktail sort, shaker sort (which can also
            refer to a variant of selection sort), ripple sort, shuffle sort, or shuttle sort, is a variation of
            bubble sort that is both a stable sorting algorithm and a comparison sort. The algorithm differs from a
            bubble sort in that it sorts in both directions on each pass through the list. This sorting algorithm is
            only marginally more difficult to implement than a bubble sort, and solves the problem of turtles in bubble
            sorts. It provides only marginal performance improvements, and does not improve asymptotic performance;
            like the bubble sort, it is not of practical interest (insertion sort is preferred for simple sorts),
            though it finds some use in education.
        </item>
        <item>
            Comb sort is a relatively simple sorting algorithm originally designed by WÅ‚odzimierz Dobosiewicz in 1980.
            Later it was rediscovered by Stephen Lacey and Richard Box in 1991. Comb sort improves on bubble sort.
            The basic idea is to eliminate turtles, or small values near the end of the list, since in a bubble sort
            these slow the sorting down tremendously.
            Rabbits, large values around the beginning of the list, do not pose a problem in bubble sort.
        </item>
    </string-array>

    <string-array name="characteristics">
        <item>
            <b>Class:</b> Sorting with changes\n
            <b>Stability:</b> Stable\n
            <b>Comparisons:</b>	Yes\n
            <b>Difficulties by time:</b>\n
            \t\t\t The worst	O(n3)\n
            \t\t\t Midle	O(n3)\n
            \t\t\t The best	O(n3)\n
            <b>Difficulties by memory:</b>	O(n)
        </item>
        <item>gifs/stupid_sort.gif</item>
        <item>gifs/stupid_sort.gif</item>
        <item>gifs/stupid_sort.gif</item>
        <item>gifs/stupid_sort.gif</item>
    </string-array>

    <string-array name="debugs">
        <item>
            Stupid sort
            c = A (3)
            Loop while: c low= Z (4)
            - Iteration 1 (5)
            c = B (6)
            - Iteration 2 (5)
            c = C (7)
            - Iteration 3 (5)
            c = D (6)
        </item>
        <item>
            Insertion sort
            c = A (3)
            Loop while: c low= Z (4)
            - Iteration 1 (5)
            c = B (6)
            - Iteration 2 (5)
            c = C (7)
            - Iteration 3 (5)
            c = D (6)
        </item>
        <item>
            Bubble sort
            c = A (3)
            Loop while: c low= Z (4)
            - Iteration 1 (5)
            c = B (6)
            - Iteration 2 (5)
            c = C (7)
            - Iteration 3 (5)
            c = D (6)
        </item>
        <item>
            Cocktail Shaker sort
            c = A (3)
            Loop while: c low= Z (4)
            - Iteration 1 (5)
            c = B (6)
            - Iteration 2 (5)
            c = C (7)
            - Iteration 3 (5)
            c = D (6)
        </item>
        <item>
            Comb sort
            c = A (3)
            Loop while: c low= Z (4)
            - Iteration 1 (5)
            c = B (6)
            - Iteration 2 (5)
            c = C (7)
            - Iteration 3 (5)
            c = D (6)
        </item>
    </string-array>

    <string-array name="demos">
        <item>file:///android_asset/gifs/stupid_sort.gif</item>
        <item>gifs/stupid_sort.gif</item>
        <item>gifs/stupid_sort.gif</item>
        <item>gifs/stupid_sort.gif</item>
        <item>gifs/stupid_sort.gif</item>
    </string-array>

    <string name="category_0">Sorts</string>
</resources>